using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.Data.OleDb;
using CrystalDecisions.CrystalReports.Engine;
using CrystalDecisions.Shared;
using Excel;
using Microsoft.Office.Core;
using System.Text;
using System.IO;

public partial class CPV_RL_RL_EXPORT_ALL : System.Web.UI.Page
{
    CCommon objCmn = new CCommon();
    protected void Page_Load(object sender, EventArgs e)
    {
        if (Session["isView"].ToString() != "1")
            Response.Redirect("NoAccess.aspx");
        txtFromDate.Focus();
        lblMsg.Text = "";
    }

    protected void btnSearch_Click(object sender, EventArgs e)
    {
        try
        {
            String strCentreID = Session["CentreId"].ToString(); //"1011";
            String strClientID = Session["ClientId"].ToString(); //"1013";
            //String strDateCriteria = "";
            string ToDate = "";
            string FromDate = "";

            if (rdoFromToDate.Checked == true)
            {
                if (txtToDate.Text.Trim() != "")
                    ToDate = Convert.ToDateTime(objCmn.strDate(txtToDate.Text.Trim())).AddDays(1.0).ToString("dd-MMM-yyyy");

                if (txtFromDate.Text.Trim() != "")
                    FromDate = objCmn.strDate(txtFromDate.Text.Trim());
            }
            else if (rdoDateTime.Checked == true)
            {
                FromDate = objCmn.strDate(txtDate.Text.Trim()) + ' ' + txtTime.Text.Trim() + ' ' + ddlTimeType.SelectedItem.Text.Trim();
                ToDate = Convert.ToDateTime(objCmn.strDate(txtDate.Text.Trim()) + ' ' + txtTime.Text.Trim() + ' ' + ddlTimeType.SelectedItem.Text.Trim()).AddMinutes(1.0).ToString("dd-MMM-yyyy hh:mm tt");
            }
            hdFromDate.Value = FromDate;
            hdToDate.Value = ToDate;
            //----------------------------------------------------------------------------

            if (strCentreID != "" && strClientID != "")
            {

                
                string sSql = "SELECT Count(*) as TotalCount FROM [CPV_RL_CASE_DETAILS] " +
                              "WHERE (([SEND_DATETIME] IS NOT NULL) AND ([CENTRE_ID] = '" + strCentreID + "') AND ([CLIENT_ID] = '" + strClientID + "')and (SEND_DATETIME >='" + FromDate + "' and SEND_DATETIME<'" + ToDate + "' ))";
               
                //object obj;
                //obj=OleDbHelper.ExecuteScalar(objCmn.ConnectionString, CommandType.Text, sSql);
                //if (obj.ToString()!=null && obj.ToString()!="")
                //    lblCaseCount.Text="Number of Cases: " +obj.ToString();
                OleDbDataReader oledbRead;
                oledbRead = OleDbHelper.ExecuteReader(objCmn.ConnectionString, CommandType.Text, sSql);
                if (oledbRead.Read() == true)
                    lblCaseCount.Text = "Number of cases : " + oledbRead["TotalCount"].ToString();
                oledbRead.Close();

                //string qry = "";
                //qry = "SELECT CASE_ID, REF_NO, ISNULL(FIRST_NAME + ' ', '') + ISNULL(MIDDLE_NAME + ' ', '') + ISNULL(LAST_NAME + ' ', '') AS APPLICANT_NAME, VERIFICATION_CODE, CONVERT (varchar(24), CASE_REC_DATETIME, 103) + ' ' + LTRIM(SUBSTRING(CONVERT (VARCHAR(20), CASE_REC_DATETIME, 22), 10, 5) + RIGHT (CONVERT (VARCHAR(20), CASE_REC_DATETIME, 22), 3)) AS CASE_REC_DATETIME, CONVERT (varchar(24), SEND_DATETIME, 103) + ' ' + LTRIM(SUBSTRING(CONVERT (VARCHAR(20), SEND_DATETIME, 22), 10, 5) + RIGHT (CONVERT (VARCHAR(20), SEND_DATETIME, 22), 3)) AS SEND_DATETIME FROM CPV_RL_CASE_DETAILS WHERE (SEND_DATETIME IS NOT NULL) AND CENTRE_ID = " + strCentreID + " AND CLIENT_ID = " + strClientID + "  AND (SEND_DATETIME >='" + FromDate + "' and SEND_DATETIME<'" + ToDate + "' ) ORDER BY CASE_ID";
                //System.Data.DataTable dt = new System.Data.DataTable();
                //DataSet ds = new DataSet();
                //OleDbDataAdapter ol = new OleDbDataAdapter(qry, objCmn.ConnectionString);
                //ol.Fill(ds, "Search");
                //dt = ds.Tables["Search"];
                //gvOutput.DataSource = dt;
                gvOutput.DataBind();
                
                
                if (gvOutput.Rows.Count > 0)
                {
                    tblCaseCount.Visible = true;
                    lblMsg.Visible = false;
                }
                else
                {
                    tblCaseCount.Visible = false;
                    lblCaseCount.Text = "";
                    lblMsg.Visible = true;
                    lblMsg.Text = "Record not found.";
                }
            }
        }
        catch (Exception ex)
        {
            lblMsg.Visible = true;
            lblMsg.Text = "Error while retreiving data: " + ex.Message;
        }
    }
    protected void btnExport1_Click(object sender, EventArgs e)
    {
        try
        {
            //getting selected rows caseid
            HiddenField hdnCaseID;
            System.Web.UI.WebControls.CheckBox chkCaseID;
            String strSelectedCaseID = "";
            foreach (GridViewRow row in gvOutput.Rows)
            {
                hdnCaseID = (HiddenField)row.FindControl("hidCaseId");
                chkCaseID = (System.Web.UI.WebControls.CheckBox)row.FindControl("chkCaseId");
                if (chkCaseID.Checked)
                {
                    strSelectedCaseID += hdnCaseID.Value + ",";
                }
            }

            if (strSelectedCaseID != "")
            {
                String[] arrCaseID = (strSelectedCaseID.TrimEnd(',')).Split(',');
                //passed caseid's in array to generate excel
                GetExport(ddlSelectFormat1.SelectedValue.ToString(), arrCaseID);
            }
            else
            {
                lblMsg.Visible = true;
                lblMsg.Text = "Please select case to Export.";
                hplDownload.Visible = false;
                hplDownload.NavigateUrl = "";
                gvOutput.DataBind();
            }
        }
        catch (Exception exp)
        {
            lblMsg.Visible = true;
            lblMsg.Text = exp.Message;
            hplDownload.Visible = false;
            hplDownload.NavigateUrl = "";
        }
    }
    protected void btnExport_Click(object sender, EventArgs e)
    {
        try
        {
            //getting selected rows caseid
            HiddenField hdnCaseID;
            System.Web.UI.WebControls.CheckBox chkCaseID;
            String strSelectedCaseID = "";
            foreach (GridViewRow row in gvOutput.Rows)
            {
                hdnCaseID = (HiddenField)row.FindControl("hidCaseId");
                chkCaseID = (System.Web.UI.WebControls.CheckBox)row.FindControl("chkCaseId");
                if (chkCaseID.Checked)
                {
                    strSelectedCaseID += hdnCaseID.Value + ",";
                }
            }

            if (strSelectedCaseID != "")
            {
                String[] arrCaseID = (strSelectedCaseID.TrimEnd(',')).Split(',');
                //passed caseid's in array to generate excel
                GetExport(ddlSelectFormat.SelectedValue.ToString(), arrCaseID);

            }
            else
            {
                lblMsg.Visible = true;
                lblMsg.Text = "Please select case to Export.";
                hplDownload.Visible = false;
                hplDownload.NavigateUrl = "";
                gvOutput.DataBind();
            }
        }
        catch (Exception exp)
        {
            lblMsg.Visible = true;
            lblMsg.Text = exp.Message;
            hplDownload.Visible = false;
            hplDownload.NavigateUrl = "";
        }
    }
    public void GetExport(string strFormat, String[] arrCaseID)
    {
        if (ddlSelectFormat.SelectedValue.ToString() == "6" || ddlSelectFormat1.SelectedValue.ToString() == "6")
            GenerateReliFormat(arrCaseID);
        else if (ddlSelectFormat.SelectedValue.ToString() == "7" || ddlSelectFormat1.SelectedValue.ToString() == "7")
            GenerateUbiFormat(arrCaseID);
        else if (ddlSelectFormat.SelectedValue.ToString() == "9" || ddlSelectFormat1.SelectedValue.ToString() == "9")
            GenerateScbHLFormat(arrCaseID);
        else if (ddlSelectFormat.SelectedValue.ToString() == "0" && ddlSelectFormat1.SelectedValue.ToString() == "0")
        {
            lblMsg.Visible = true;
            lblMsg.Text = "Please select format.";
            hplDownload.Visible = false;
            hplDownload.NavigateUrl = "";
        }
        gvOutput.DataBind();
    }
    public void GenerateScbHLFormat(string[] arrCaseId)
    {
        Excel.Application oExcelApp;
        Excel.Workbooks oBooks;
        Excel._Workbook oBook;
        Excel._Worksheet oSheet;
        Excel._Worksheet oSheet1;
        Excel.Range oexcelRange;
        object oMissing;
        CCommon oCmn;

        //try
        //{
        String strCentreID = Session["CentreId"].ToString(); //"1011";"1011";
        String strClientID = Session["ClientId"].ToString(); //"1013";"10111";
        if (strCentreID != "" && strClientID != "")
        {
            oCmn = new CCommon();
            DataSet ds;
            DataSet ds1;
            OleDbConnection conn = new OleDbConnection(oCmn.ConnectionString);
            String strRefID = "";
            String strExcel = Server.MapPath("RV.xls");

            string strMapPath = Server.MapPath("../../ExportToUTI/RL/") + Session["UserName"].ToString() + "/";
            string strDateTime = DateTime.Now.ToString("ddMMyyyyhhmmss");

            if (!Directory.Exists(strMapPath + strDateTime))
                Directory.CreateDirectory(strMapPath + strDateTime);

            foreach (String strCaseID in arrCaseId)
            {
                ArrayList arrVerType = new ArrayList();
                String strTypeID = "";
                //try
                //{
                conn.Open();
                OleDbParameter[] param = new OleDbParameter[3];
                param[0] = new OleDbParameter("@centre_id", OleDbType.VarChar, 15);
                param[0].Value = strCentreID;
                param[1] = new OleDbParameter("@client_id", OleDbType.VarChar, 15);
                param[1].Value = strClientID;
                param[2] = new OleDbParameter("@case_id", OleDbType.VarChar, 15);
                param[2].Value = strCaseID;

                ds = OleDbHelper.ExecuteDataset(conn, CommandType.StoredProcedure, "SpCPV_RL_CASE_OUTPUT_VW", param);
                conn.Close();
                //excel setting

                if (ds.Tables[0].Rows.Count > 0)
                    strRefID = ds.Tables[0].Rows[0]["REF_NO"].ToString();

                String strFileName = strMapPath + strDateTime + "/" + strRefID + ".xls";

                if (File.Exists(strFileName))
                    File.Delete(strFileName);

                File.Copy(strExcel, strFileName);

                oMissing = System.Reflection.Missing.Value;
                oExcelApp = new Excel.Application();
                oExcelApp.Visible = false;
                oBooks = oExcelApp.Workbooks;
                oMissing = System.Reflection.Missing.Value;
                oExcelApp.Visible = false;
                oBook = oBooks._Open(strFileName, oMissing, oMissing, oMissing, oMissing, oMissing, oMissing, oMissing, oMissing, oMissing, oMissing, oMissing, oMissing);
                oExcelApp.Visible = false;
                oExcelApp.UserControl = false;
                oExcelApp.ActiveWindow.DisplayGridlines = false;  

                //getting data from dataset to insert it in excel cells
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    strTypeID = ds.Tables[0].Rows[i]["VERIFICATION_TYPE_ID"].ToString();
                    //assign ref id

                    //getting attempt details 
                    conn.Open();
                    String strSQL1 = "";
                    if (strTypeID == "1" || strTypeID == "2")
                    {
                        strSQL1 = "SELECT VERIFIER_ID, ATTEMPT_DATE_TIME, FULLNAME FROM VERIFIER_LAST_ATTEMPT_VW INNER JOIN FE_VW ON VERIFIER_ID=EMP_ID " +
                                  "WHERE CASE_ID='" + strCaseID + "' AND VERIFICATION_TYPE_ID='" + strTypeID + "'";
                    }
                    if (strSQL1 != "")
                    {
                        ds1 = OleDbHelper.ExecuteDataset(conn, CommandType.Text, strSQL1);
                        conn.Close();

                        switch (Convert.ToInt16(strTypeID))
                        {
                            case 1:
                                //RV
                                arrVerType.Add("RV");
                                oSheet = (Excel._Worksheet)oBook.Worksheets["RV"];
                                oSheet.Visible = Excel.XlSheetVisibility.xlSheetVisible;
                                oSheet.Unprotect(oMissing);

                                oexcelRange = ((Excel.Range)oSheet.Cells[3, 5]);
                                oexcelRange.HorizontalAlignment = HorizontalAlign.Left;
                                oexcelRange.Value2 = ds.Tables[0].Rows[i]["first_name"].ToString();

                                string connei = "";
                                connei = ds.Tables[0].Rows[i]["confirm_neighbour1"].ToString();
                                //if (ds.Tables[0].Rows[i]["confirm_neighbour1"].ToString())
                                {
                                    if (connei == "Yes")
                                    {
                                        oexcelRange = ((Excel.Range)oSheet.Cells[5, 8]);
                                        oexcelRange.Font.Name = "Wingdings 2";
                                        oexcelRange.FormulaR1C1 = "R";
                                        oexcelRange.Font.Size = 18;
                                        oexcelRange.RowHeight = 18.0;
                                        oexcelRange.HorizontalAlignment = XlHAlign.xlHAlignCenter;
                                        oexcelRange.VerticalAlignment = XlHAlign.xlHAlignCenter;
                                        oexcelRange.EntireColumn.VerticalAlignment = XlHAlign.xlHAlignCenter;
                                        oexcelRange.Font.Bold = true;
                                    }
                                    else
                                    {
                                        oexcelRange = ((Excel.Range)oSheet.Cells[5, 8]);
                                        oexcelRange.Font.Name = "Webdings";
                                        oexcelRange.FormulaR1C1 = "c";
                                        oexcelRange.Font.Size = 12;
                                        oexcelRange.RowHeight = 18.0;
                                        oexcelRange.HorizontalAlignment = XlHAlign.xlHAlignCenter;
                                        oexcelRange.VerticalAlignment = XlHAlign.xlHAlignCenter;
                                        oexcelRange.EntireColumn.VerticalAlignment = XlHAlign.xlHAlignCenter;
                                    }
                                    if (connei == "No")
                                    {
                                        oexcelRange = ((Excel.Range)oSheet.Cells[5, 13]);
                                        oexcelRange.Font.Name = "Wingdings 2";
                                        oexcelRange.FormulaR1C1 = "R";
                                        oexcelRange.Font.Size = 18;
                                        oexcelRange.RowHeight = 18.0;
                                        oexcelRange.HorizontalAlignment = XlHAlign.xlHAlignCenter;
                                        oexcelRange.VerticalAlignment = XlHAlign.xlHAlignCenter;
                                        oexcelRange.EntireColumn.VerticalAlignment = XlHAlign.xlHAlignCenter;
                                        oexcelRange.Font.Bold = true;
                                    }
                                    else
                                    {
                                        oexcelRange = ((Excel.Range)oSheet.Cells[5, 13]);
                                        oexcelRange.Font.Name = "Webdings";
                                        oexcelRange.FormulaR1C1 = "c";
                                        oexcelRange.Font.Size = 12;
                                        oexcelRange.RowHeight = 18.0;
                                        oexcelRange.HorizontalAlignment = XlHAlign.xlHAlignCenter;
                                        oexcelRange.VerticalAlignment = XlHAlign.xlHAlignCenter;
                                        oexcelRange.EntireColumn.VerticalAlignment = XlHAlign.xlHAlignCenter;
                                    }
                                }
                                string ressat = "";
                                ressat = ds.Tables[0].Rows[i]["resstatus_neighbour1"].ToString();
                                {
                                    if (ressat == "Parent/Relative Owned")
                                    {
                                        oexcelRange = ((Excel.Range)oSheet.Cells[7, 8]);
                                        oexcelRange.Font.Name = "Wingdings 2";
                                        oexcelRange.FormulaR1C1 = "R";
                                        oexcelRange.Font.Size = 18;
                                        oexcelRange.RowHeight = 18.0;
                                        oexcelRange.HorizontalAlignment = XlHAlign.xlHAlignCenter;
                                        oexcelRange.VerticalAlignment = XlHAlign.xlHAlignCenter;
                                        oexcelRange.EntireColumn.VerticalAlignment = XlHAlign.xlHAlignCenter;
                                        oexcelRange.Font.Bold = true;
                                    }
                                    else
                                    {
                                        oexcelRange = ((Excel.Range)oSheet.Cells[7, 8]);
                                        oexcelRange.Font.Name = "Webdings";
                                        oexcelRange.FormulaR1C1 = "c";
                                        oexcelRange.Font.Size = 12;
                                        oexcelRange.RowHeight = 18.0;
                                        oexcelRange.HorizontalAlignment = XlHAlign.xlHAlignCenter;
                                        oexcelRange.VerticalAlignment = XlHAlign.xlHAlignCenter;
                                        oexcelRange.EntireColumn.VerticalAlignment = XlHAlign.xlHAlignCenter;
                                    }
                                    if (ressat == "Rented/Co.Provided")
                                    {
                                        oexcelRange = ((Excel.Range)oSheet.Cells[7, 18]);
                                        oexcelRange.Font.Name = "Wingdings 2";
                                        oexcelRange.FormulaR1C1 = "R";
                                        oexcelRange.Font.Size = 18;
                                        oexcelRange.RowHeight = 18.0;
                                        oexcelRange.HorizontalAlignment = XlHAlign.xlHAlignCenter;
                                        oexcelRange.VerticalAlignment = XlHAlign.xlHAlignCenter;
                                        oexcelRange.EntireColumn.VerticalAlignment = XlHAlign.xlHAlignCenter;
                                        oexcelRange.Font.Bold = true;
                                    }
                                    else
                                    {
                                        oexcelRange = ((Excel.Range)oSheet.Cells[7, 18]);
                                        oexcelRange.Font.Name = "Webdings";
                                        oexcelRange.FormulaR1C1 = "c";
                                        oexcelRange.Font.Size = 12;
                                        oexcelRange.RowHeight = 18.0;
                                        oexcelRange.HorizontalAlignment = XlHAlign.xlHAlignCenter;
                                        oexcelRange.VerticalAlignment = XlHAlign.xlHAlignCenter;
                                        oexcelRange.EntireColumn.VerticalAlignment = XlHAlign.xlHAlignCenter;
                                    }
                                    if (ressat == "Self Owned")
                                    {
                                        oexcelRange = ((Excel.Range)oSheet.Cells[8, 8]);
                                        oexcelRange.Font.Name = "Wingdings 2";
                                        oexcelRange.FormulaR1C1 = "R";
                                        oexcelRange.Font.Size = 18;
                                        oexcelRange.RowHeight = 18.0;
                                        oexcelRange.HorizontalAlignment = XlHAlign.xlHAlignCenter;
                                        oexcelRange.VerticalAlignment = XlHAlign.xlHAlignCenter;
                                        oexcelRange.EntireColumn.VerticalAlignment = XlHAlign.xlHAlignCenter;
                                        oexcelRange.Font.Bold = true;
                                    }
                                    else
                                    {
                                        oexcelRange = ((Excel.Range)oSheet.Cells[8, 8]);
                                        oexcelRange.Font.Name = "Webdings";
                                        oexcelRange.FormulaR1C1 = "c";
                                        oexcelRange.Font.Size = 12;
                                        oexcelRange.RowHeight = 18.0;
                                        oexcelRange.HorizontalAlignment = XlHAlign.xlHAlignCenter;
                                        oexcelRange.VerticalAlignment = XlHAlign.xlHAlignCenter;
                                        oexcelRange.EntireColumn.VerticalAlignment = XlHAlign.xlHAlignCenter;
                                    }
                                    if (ressat == "PG Accomodation")
                                    {
                                        oexcelRange = ((Excel.Range)oSheet.Cells[8, 15]);
                                        oexcelRange.Font.Name = "Wingdings 2";
                                        oexcelRange.FormulaR1C1 = "R";
                                        oexcelRange.Font.Size = 18;
                                        oexcelRange.RowHeight = 18.0;
                                        oexcelRange.HorizontalAlignment = XlHAlign.xlHAlignCenter;
                                        oexcelRange.VerticalAlignment = XlHAlign.xlHAlignCenter;
                                        oexcelRange.EntireColumn.VerticalAlignment = XlHAlign.xlHAlignCenter;
                                        oexcelRange.Font.Bold = true;
                                    }
                                    else
                                    {
                                        oexcelRange = ((Excel.Range)oSheet.Cells[8, 15]);
                                        oexcelRange.Font.Name = "Webdings";
                                        oexcelRange.FormulaR1C1 = "c";
                                        oexcelRange.Font.Size = 12;
                                        oexcelRange.RowHeight = 18.0;
                                        oexcelRange.HorizontalAlignment = XlHAlign.xlHAlignCenter;
                                        oexcelRange.VerticalAlignment = XlHAlign.xlHAlignCenter;
                                        oexcelRange.EntireColumn.VerticalAlignment = XlHAlign.xlHAlignCenter;
                                    }
                                    if (ressat == "Govt.Quarters")
                                    {
                                        oexcelRange = ((Excel.Range)oSheet.Cells[8, 23]);
                                        oexcelRange.Font.Name = "Wingdings 2";
                                        oexcelRange.FormulaR1C1 = "R";
                                        oexcelRange.Font.Size = 18;
                                        oexcelRange.RowHeight = 18.0;
                                        oexcelRange.HorizontalAlignment = XlHAlign.xlHAlignCenter;
                                        oexcelRange.VerticalAlignment = XlHAlign.xlHAlignCenter;
                                        oexcelRange.EntireColumn.VerticalAlignment = XlHAlign.xlHAlignCenter;
                                        oexcelRange.Font.Bold = true;
                                    }
                                    else
                                    {
                                        oexcelRange = ((Excel.Range)oSheet.Cells[8, 23]);
                                        oexcelRange.Font.Name = "Webdings";
                                        oexcelRange.FormulaR1C1 = "c";
                                        oexcelRange.Font.Size = 12;
                                        oexcelRange.RowHeight = 18.0;
                                        oexcelRange.HorizontalAlignment = XlHAlign.xlHAlignCenter;
                                        oexcelRange.VerticalAlignment = XlHAlign.xlHAlignCenter;
                                        oexcelRange.EntireColumn.VerticalAlignment = XlHAlign.xlHAlignCenter;
                                    }
                                }

                                break; 
                            default:
                                break;
                         }
                    }
                }
            }
        }
    }
        //catch(ex as Exception)
        //    (
        //    )
    
    public void GenerateReliFormat(string[] arrCaseId)
    {
        int iCount = 0;
        try
        {
            if (arrCaseId.Length > 0)
            {
                DataSet dsStdOutput = new DataSet();
                CReport objReport = new CReport();
                System.Data.DataTable dtCaseId = new System.Data.DataTable();
                System.Data.DataTable dtOfficeVerify = new System.Data.DataTable();
                System.Data.DataTable dtResiVerify = new System.Data.DataTable();

                string strMapPath = Server.MapPath("../../ExportToUTI/RL/") + Session["UserName"].ToString() + "/";
                string strDateTime = DateTime.Now.ToString("ddMMyyyyhhmmss");

                if (!Directory.Exists(strMapPath + strDateTime))
                    Directory.CreateDirectory(strMapPath + strDateTime);

                for (int i = 0; i < arrCaseId.Length; i++)
                {
                    dsStdOutput.Tables.Clear();
                    dsStdOutput.Clear();
                    string sRefNo = "";
                    OleDbDataReader oledbRead;
                    oledbRead = objReport.GetRefNoByCaseIdRL(arrCaseId[i].ToString());
                    if (oledbRead.Read())
                        sRefNo = oledbRead["Case_id"].ToString();

                    oledbRead.Close();
                    dtCaseId = objReport.GetCaseIdforReportRL1(arrCaseId[i].ToString());
                    dtOfficeVerify = objReport.GetBusiVeriDtlRL(arrCaseId[i].ToString());
                    dtResiVerify = objReport.GetResiVeriDtlRL(arrCaseId[i].ToString());

                    dsStdOutput.Tables.Add(dtCaseId);
                    dsStdOutput.Tables[0].TableName = "Main";

                    dsStdOutput.Tables.Add(dtOfficeVerify);
                    dsStdOutput.Tables[1].TableName = "RL_Reli_BV";

                    dsStdOutput.Tables.Add(dtResiVerify);
                    dsStdOutput.Tables[2].TableName = "RL_Reli_RV";

                    CrystalReportDocument myReportDocument;
                    myReportDocument = new CrystalReportDocument();
                    myReportDocument.Load(Server.MapPath("RL_Reli_Export.rpt"));
                    myReportDocument.SetDataSource(dsStdOutput);

                    Session["Path"] = Server.MapPath("RL_Reli_Export.rpt");
                    myReportDocument.ExportToDisk(ExportFormatType.PortableDocFormat, strMapPath + strDateTime + "/" + sRefNo + ".pdf");
                    //myReportDocument.ExportToDisk(ExportFormatType.PortableDocFormat,"D:\\Santosh\\Source\\PMS_CPV\\Application\\ExportToUTI" + "//KYC//" + strDateTime + "/" + sRefNo + ".pdf");

                    myReportDocument.Dispose();
                    GC.Collect();
                }

                lblMsg.Visible = true;
                lblMsg.Text = "Export Completed successfully.";
                hplDownload.Visible = true;
                //hplDownload.NavigateUrl = "D:\\Santosh\\Source\\PMS_CPV\\Application\\ExportToUTI" + "//KYC//" + Session["UserName"].ToString() + "//" + strDateTime + "//";
                hplDownload.NavigateUrl = ConfigurationManager.AppSettings["FtpPath"] + "//RL//" + Session["UserName"].ToString() + "//" + strDateTime + "//";
                dtCaseId.Clear();
                dtOfficeVerify.Clear();
                dtResiVerify.Clear();

                dtCaseId.Dispose();
                dtOfficeVerify.Dispose();
                dtResiVerify.Dispose();

                dsStdOutput.Clear();
                dsStdOutput.Dispose();
            }
        }
        catch (Exception exp)
        {
            lblMsg.Visible = true;
            lblMsg.Text = exp.Message;
            hplDownload.Visible = false;
            hplDownload.NavigateUrl = "";
        }
    }

    public void GenerateUbiFormat(string[] arrCaseId)
    {
        int iCount = 0;
        try
        {
            if (arrCaseId.Length > 0)
            {
                DataSet dsStdOutput = new DataSet();
                CReport objReport = new CReport();
                System.Data.DataTable dtCaseId = new System.Data.DataTable();
                System.Data.DataTable dtOfficeVerify = new System.Data.DataTable();
                System.Data.DataTable dtResiVerify = new System.Data.DataTable();
                System.Data.DataTable dtResiTele = new System.Data.DataTable();   

                string strMapPath = Server.MapPath("../../ExportToUTI/RL/") + Session["UserName"].ToString() + "/";
                string strDateTime = DateTime.Now.ToString("ddMMyyyyhhmmss");

                if (!Directory.Exists(strMapPath + strDateTime))
                    Directory.CreateDirectory(strMapPath + strDateTime);

                for (int i = 0; i < arrCaseId.Length; i++)
                {
                    dsStdOutput.Tables.Clear();
                    dsStdOutput.Clear();
                    string sRefNo = "";
                    OleDbDataReader oledbRead;
                    oledbRead = objReport.GetRefNoByCaseIdRL(arrCaseId[i].ToString());
                    if (oledbRead.Read())
                        sRefNo = oledbRead["Case_id"].ToString();

                    oledbRead.Close();
                    dtCaseId = objReport.GetCaseIdforReportRL1(arrCaseId[i].ToString());
                    dtOfficeVerify = objReport.GetBusiVeriDtlRLubi(arrCaseId[i].ToString());
                    dtResiVerify = objReport.GetResiVeriDtlRLubi(arrCaseId[i].ToString());
                    dtResiTele = objReport.GetResiTeleDtlRLubi(arrCaseId[i].ToString());

                    dsStdOutput.Tables.Add(dtCaseId);
                    dsStdOutput.Tables[0].TableName = "Main";

                    dsStdOutput.Tables.Add(dtOfficeVerify);
                    dsStdOutput.Tables[1].TableName = "RL_Ubi_BV";

                    dsStdOutput.Tables.Add(dtResiVerify);
                    dsStdOutput.Tables[2].TableName = "RL_Ubi_RV";

                    dsStdOutput.Tables.Add(dtResiTele);
                    dsStdOutput.Tables[3].TableName = "RL_Ubi_RT";

                    CrystalReportDocument myReportDocument;
                    myReportDocument = new CrystalReportDocument();
                    myReportDocument.Load(Server.MapPath("RL_Ubi_Export.rpt"));
                    myReportDocument.SetDataSource(dsStdOutput);

                    Session["Path"] = Server.MapPath("RL_Ubi_Export.rpt");
                    myReportDocument.ExportToDisk(ExportFormatType.PortableDocFormat, strMapPath + strDateTime + "/" + sRefNo + ".pdf");
                    //myReportDocument.ExportToDisk(ExportFormatType.PortableDocFormat,"D:\\Santosh\\Source\\PMS_CPV\\Application\\ExportToUTI" + "//KYC//" + strDateTime + "/" + sRefNo + ".pdf");

                    myReportDocument.Dispose();
                    GC.Collect();
                }

                lblMsg.Visible = true;
                lblMsg.Text = "Export Completed successfully.";
                hplDownload.Visible = true;
                //hplDownload.NavigateUrl = "D:\\Santosh\\Source\\PMS_CPV\\Application\\ExportToUTI" + "//KYC//" + Session["UserName"].ToString() + "//" + strDateTime + "//";
                hplDownload.NavigateUrl = ConfigurationManager.AppSettings["FtpPath"] + "//RL//" + Session["UserName"].ToString() + "//" + strDateTime + "//";
                dtCaseId.Clear();
                dtOfficeVerify.Clear();
                dtResiVerify.Clear();
                dtResiTele.Clear(); 

                dtCaseId.Dispose();
                dtOfficeVerify.Dispose();
                dtResiVerify.Dispose();
                dtResiTele.Dispose();  

                dsStdOutput.Clear();
                dsStdOutput.Dispose();
            }
        }
        catch (Exception exp)
        {
            lblMsg.Visible = true;
            lblMsg.Text = exp.Message;
            hplDownload.Visible = false;
            hplDownload.NavigateUrl = "";
        }
    }
    protected void cvSelectFormat_ServerValidate(object source, ServerValidateEventArgs args)
    {
        if (source.ToString() == "0")
        {
            lblMsg.Visible = true;
            lblMsg.Text = "Please select format.";
        }
    }

   protected void gvOutput_PageIndexChanged(object sender, EventArgs e)
    {
        gvOutput.DataBind();
    }
    protected void gvOutput_PageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        gvOutput.DataBind();
    }
    protected void gvOutput_DataBound(object sender, System.EventArgs e)
    {
        // Each time the data is bound to the grid we need to build up the CheckBoxIDs array
        // Get the header CheckBox
        if (gvOutput.Rows.Count <= 0)
        {
            //lblMsg.Text = "No record found";
        }
        else
        {
            tblCaseCount.Visible = true;
            System.Web.UI.WebControls.CheckBox cbHeader = ((System.Web.UI.WebControls.CheckBox)(gvOutput.HeaderRow.FindControl("HeaderLevelCheckBox")));
            cbHeader.Attributes["onclick"] = "ChangeAllCheckBoxStates(this.checked);";
            foreach (GridViewRow gvr in gvOutput.Rows)
            {
                // Get a programmatic reference to the CheckBox control
                System.Web.UI.WebControls.CheckBox cb = ((System.Web.UI.WebControls.CheckBox)(gvr.FindControl("chkCaseId")));
                ClientScript.RegisterArrayDeclaration("CheckBoxIDs", string.Concat("\'", cb.ClientID, "\'"));
            }
        }
    }
}
