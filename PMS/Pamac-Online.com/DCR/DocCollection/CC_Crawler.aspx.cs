using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.IO;
using System.Text.RegularExpressions;
using System.Data.SqlClient;
using System.Text;
using System.Drawing;

public partial class CC_CC_Crawler : System.Web.UI.Page
{
    protected void Page_Load(object sender, EventArgs e)
    {
        lblMsgXls.Text = "";
    }
    protected void btnUplaod_Click(object sender, EventArgs e)
    {
        try
        {
            if (xslFileUpload.HasFile)
            {
                String strPath = "";
                String MyFile = "";

                //to get the file extention
                String strFileName = xslFileUpload.FileName.ToString();

                FileInfo fi = new FileInfo(strFileName);
                String strExt = fi.Extension;

                if (strExt.ToLower() == ".html" || strExt.ToLower() == ".htm")
                {
                    lblMsgXls.Text = "";
                    //Uploading file start.
                    strPath = Server.MapPath("../../ImportFiles/");
                    MyFile = strFileName + ".html";
                    strPath = strPath + MyFile;

                    xslFileUpload.PostedFile.SaveAs(strPath);
                   //Added By Manoj to filter the multipul rows into single row.
                    DataView dvGetExcelData = new DataView(parseData(strPath));
                    dvGetExcelData.Sort = "RefNo ASC";
                    DataTable dtMargeData = new DataTable();
                    dtMargeData = getFilteredData(dvGetExcelData);
                    
                    dtMargeData.Dispose();
                    gvCrawler.DataSource = dtMargeData;
                    gvCrawler.DataBind();
                    ///End
                    dvGetExcelData.Dispose();
                    dtMargeData.Clear();

                    if (gvCrawler.Rows.Count > 0)
                        pnlCrawler.Visible = true;
                    else
                        pnlCrawler.Visible = false;
                    if (File.Exists(strPath))
                    {
                        File.Delete(strPath);
                    }

                }
                else
                {
                    gvCrawler = null;
                    pnlCrawler.Visible = false;
                    lblMsgXls.Visible = true;
                    lblMsgXls.Text = "Please select only .html/.htm files";
                }
            }
        }
        catch (Exception ex)
        {
            lblMsgXls.Text = "Error while uploading excelsheet: " + ex.Message;
            lblMsgXls.Visible = true;
        }
    }

    protected void btnExcelReport_Click(object sender, EventArgs e)
    {
        try
        {
            Response.ClearContent();
            gvCrawler.BackColor = System.Drawing.Color.White;
            gvCrawler.GridLines = GridLines.Both;
            gvCrawler.AutoGenerateDeleteButton = false;
            gvCrawler.AutoGenerateEditButton = false;
            gvCrawler.AllowSorting = false;
            gvCrawler.AllowPaging = false;
            //gvCrawler.DataBind();

            string attachment = "attachment; filename=Crawler.xls";
            Response.AddHeader("content-disposition", attachment);
            Response.ContentType = "application/ms-excel";

            StringWriter sw = new System.IO.StringWriter();
            HtmlTextWriter htw = new HtmlTextWriter(sw);
            gvCrawler.EnableViewState = false;
            gvCrawler.RenderControl(htw);

            Response.Write(sw.ToString());
            Response.End();
        }
        catch (Exception ex)
        {
            lblMsgXls.Visible = true;
            lblMsgXls.Text = "Error while exporting excel: " + ex.Message;
        }
    }


    public override void VerifyRenderingInServerForm(Control control)
    {

    }

    private DataTable parseData(string sPath)
    {
        DataTable oDT = new DataTable();
        try
        {
            string sHTML;
            string sData;
            string sColList = ""; //STRING
            Int32 iCtr, jCtr, kCtr, iRow, iColPos; //INTEGERS

            FileStream oFileStream;
            StreamReader oSr;
            //Dictionary<string, string> dColList = new Dictionary<string, string>();
            SortedList dColList = new SortedList();


            if (!File.Exists(sPath))
            {
                //MessageBox.Show("File does not exists.");
                lblMsgXls.Text = "File does not exists.";
                return null;
            }

            oFileStream = new FileStream(sPath, FileMode.Open, FileAccess.Read);
            oSr = new StreamReader(oFileStream);
            sHTML = oSr.ReadToEnd();
            sHTML = parseHTML(sHTML); //REMOVE ALL HTML TAGS AND CONVERT THEM INTO '|'
            sHTML = sHTML.Replace("&nbsp;", ""); //REMOVE ALL BLANK SPACES
            sData = "";

            sHTML = sHTML.Replace("SNo.:", "~"); //REMOVE ALL BLANK SPACES
            string[] arRecord = sHTML.Split('~'); //AS 'SNo.:' is always the first cell so split on it and you will get all records

            for (iCtr = 1; iCtr < arRecord.Length; iCtr++)
            {
                arRecord[iCtr] = "SNo.:" + arRecord[iCtr];
                //AS we have converted all the HTML tags into '|' so now each row have column data as '|' seperated, now we will further split on '|' for get the columns
                string[] arCol = arRecord[iCtr].Split('|');

                for (jCtr = 0; jCtr < arCol.Length; jCtr++)
                {
                    if (arCol[jCtr].Trim() != "")
                    {
                        if (arCol[jCtr].Trim().Length == 1)
                        {
                            if (Convert.ToInt32(arCol[jCtr].Trim()) != 10) //there are End of linechr in file, which need to be eleminated
                            {
                                sData = sData + arCol[jCtr].Trim() + "~"; //Store the columns as ~ seperated
                            }
                        }
                        else
                        {
                            sData = sData + arCol[jCtr].Trim() + "~";
                        }
                    }
                }
                sData = sData + "|";//Store the rows as !~! seperated
            }

            arRecord = sData.Split('|');//GET all rows
            //This process is to find out the list of columns for which we know the names. name will be ":" seperated in each cell/column
            for (iCtr = 0; iCtr < arRecord.Length; iCtr++)
            {
                string[] arCol = arRecord[iCtr].Split('~');//GET all columns in the rows

                for (jCtr = 0; jCtr < arCol.Length; jCtr++)
                {
                    if (arCol[jCtr].Trim().IndexOf(':') != -1)
                    {
                        string[] arColData = arCol[jCtr].Trim().Split(':');

                        if (sColList.IndexOf(arColData[0].Trim()) == -1)
                        {
                            if (sColList == "")
                            {
                                sColList = arColData[0].Trim();
                            }
                            else
                            {
                                sColList = sColList + "," + arColData[0].Trim();
                            }
                        }
                    }
                }
            }
            //add the columns which has no heading available in data, use the index(0 base).
            //This is desided by looking at the data as these cells dont have heading like other cells
            //so we are sting 0 base index as key and the userdefine name as value which will go as the column name.
            dColList.Add("3", "RefNo");
            dColList.Add("4", "VType");
            dColList.Add("6", "Name");
            dColList.Add("7", "Address");
            dColList.Add("8", "Address1");
            //Get the columns list into array to store in the dictionary object
            string[] arColList = sColList.Split(',');
            for (iCtr = 0; iCtr < arColList.Length; iCtr++)
            {
                dColList.Add(arColList[iCtr], arColList[iCtr]);
            }

            //Dictionary<String, String>.KeyCollection oKeyCol;
            // Dictionary<String, String>.ValueCollection oValCol;

            ICollection oKeyCol;
            oKeyCol = dColList.Keys;

            // oValCol = dColList.Values;
            string[][] arData = new string[arRecord.Length + 1][];
            iRow = 0;
            for (iCtr = 0; iCtr < arRecord.Length; iCtr++)
            {
                arData[iRow] = new string[dColList.Count];

                string[] arCol = arRecord[iCtr].Split('~');
                for (jCtr = 0; jCtr < arCol.Length; jCtr++)
                {
                    if (arCol[jCtr].Trim().IndexOf(':') == -1)
                    {
                        iColPos = -1;
                        kCtr = 0;
                        foreach (string key in oKeyCol)
                        {
                            if (key == Convert.ToString(jCtr))
                            {
                                iColPos = kCtr;
                                break;
                            }
                            kCtr++;
                        }
                        if (iColPos != -1)
                        {
                            arData[iRow][iColPos] = arCol[jCtr].Trim();
                        }
                    }
                    else
                    {
                        string[] arColData = arCol[jCtr].Trim().Split(':');
                        iColPos = -1;
                        kCtr = 0;
                        foreach (string key in oKeyCol)
                        {
                            if (key == arColData[0].Trim())
                            {
                                iColPos = kCtr;
                                break;
                            }
                            kCtr++;
                        }
                        arData[iRow][iColPos] = arColData[1].Trim();
                    }
                }
                iRow = iRow + 1;
            }


            foreach (string key in oKeyCol)
            {
                //oDT.Columns.Add(dColList[key]);
                oDT.Columns.Add(dColList[key].ToString());

            }
            for (iCtr = 0; iCtr < arData.Length - 1; iCtr++)
            {
                DataRow Row = oDT.NewRow();

                for (jCtr = 0; jCtr < arData[iCtr].Length; jCtr++)
                {
                    Row[jCtr] = arData[iCtr][jCtr];
                }
                oDT.Rows.Add(Row);
            }

            oFileStream.Close();
        }
        catch (Exception ex)
        {
            lblMsgXls.Visible = true;
            lblMsgXls.Text = "Error: " + ex.Message;
        }
        return oDT;
    }

        private string parseHTML(string strHTML)
        {
            string strOutput = "";
            try
            {
                //Strips the HTML tags from strHTML
                Regex objRegExp;
               
                objRegExp = new Regex("<(.|\n)+?>", RegexOptions.IgnoreCase);

                //Replace all HTML tag matches with the | string
                strOutput = objRegExp.Replace(strHTML, "|");

                //Replace all < and > with &lt; and &gt;
                strOutput = strOutput.Replace("<", "&lt;");
                strOutput = strOutput.Replace(">", "&gt;");

                objRegExp = null;
            }
            catch (Exception ex)
            {
                lblMsgXls.Visible = true;
                lblMsgXls.Text = "Error: " + ex.Message;
            }
            return strOutput;    //Return the value of strOutput
        }
    public DataTable getFilteredData(DataView dvExcel)
    {
        DataTable dtMargeValue = new DataTable();
        dtMargeValue.Columns.Add("RefNo");
        dtMargeValue.Columns.Add("VType");
        dtMargeValue.Columns.Add("Name");
        dtMargeValue.Columns.Add("Address");
        dtMargeValue.Columns.Add("Agency");
        dtMargeValue.Columns.Add("AnyInfo");
        dtMargeValue.Columns.Add("City");
        dtMargeValue.Columns.Add("Date");
        dtMargeValue.Columns.Add("Dept");
        dtMargeValue.Columns.Add("Doc");
        dtMargeValue.Columns.Add("EXEC");
        dtMargeValue.Columns.Add("Extn");
        dtMargeValue.Columns.Add("Lndmrk");
        dtMargeValue.Columns.Add("Ph");
        dtMargeValue.Columns.Add("PIN");
        dtMargeValue.Columns.Add("Priority");
        dtMargeValue.Columns.Add("SNo");
        dtMargeValue.Columns.Add("BussAdd");
        dtMargeValue.Columns.Add("BussCity");
        dtMargeValue.Columns.Add("BussPH");
        dtMargeValue.Columns.Add("BussExt");
        dtMargeValue.Columns.Add("BussLndmrk");
        dtMargeValue.Columns.Add("BussPin");

        DataRow drMargeValue;
        int nCount = 0;

        string strRefNo = string.Empty;
        string strNewRefNo = string.Empty;
        string strVeriType = string.Empty;
        string strName = string.Empty;
        string strPriority = string.Empty;
        string strDept = string.Empty;
        string strDoc = string.Empty;
        string strDate = string.Empty;
        string strAnyInfo = string.Empty;
        string strAgency = string.Empty;
        string strSrNo = string.Empty;
        string strEXEC = string.Empty;

        string strBussAdd = string.Empty;
        string strBussCity = string.Empty;
        string strBussPH = string.Empty;
        string strBussExt = string.Empty;
        string strBussLndMrk = string.Empty;
        string strBussPin = string.Empty;


        string strResiAdd = string.Empty;
        string strResiCity = string.Empty;
        string strResiPH = string.Empty;
        string strResiExt = string.Empty;
        string strResiLndMrk = string.Empty;
        string strResiPin = string.Empty;

        string strFirstTime = string.Empty;

        if (dvExcel != null)
        {
            if (dvExcel.Count != 0)
            {
                for (int i = 0; i < dvExcel.Count; i++)
                {

                    if (dvExcel[i]["RefNo"].ToString() != "")
                    {
                        strNewRefNo = dvExcel[i]["RefNo"].ToString();

                        if ((strRefNo != strNewRefNo) && (strFirstTime == "Y"))
                        {
                            drMargeValue = dtMargeValue.NewRow();
                            dtMargeValue.Rows.Add();
                            dtMargeValue.Rows[nCount]["RefNo"] = strRefNo;
                            dtMargeValue.Rows[nCount]["VType"] = strVeriType;
                            dtMargeValue.Rows[nCount]["Name"] = strName;
                            dtMargeValue.Rows[nCount]["Address"] = strResiAdd;
                            dtMargeValue.Rows[nCount]["Agency"] = strAgency;
                            dtMargeValue.Rows[nCount]["AnyInfo"] = strAnyInfo;
                            dtMargeValue.Rows[nCount]["City"] = strResiCity;
                            dtMargeValue.Rows[nCount]["Date"] = strDate;
                            dtMargeValue.Rows[nCount]["Dept"] = strDept;
                            dtMargeValue.Rows[nCount]["Doc"] = strDoc;
                            dtMargeValue.Rows[nCount]["EXEC"] = strEXEC;
                            dtMargeValue.Rows[nCount]["Extn"] = strResiExt;
                            dtMargeValue.Rows[nCount]["Lndmrk"] = strResiLndMrk;
                            dtMargeValue.Rows[nCount]["Ph"] = strResiPH;
                            dtMargeValue.Rows[nCount]["PIN"] = strResiPin;
                            dtMargeValue.Rows[nCount]["Priority"] = strPriority;
                            dtMargeValue.Rows[nCount]["SNo"] = strSrNo;
                            dtMargeValue.Rows[nCount]["BussAdd"] = strBussAdd;
                            dtMargeValue.Rows[nCount]["BussCity"] = strBussCity;
                            dtMargeValue.Rows[nCount]["BussPH"] = strBussPH;
                            dtMargeValue.Rows[nCount]["BussExt"] = strBussExt;
                            dtMargeValue.Rows[nCount]["BussLndmrk"] = strBussLndMrk;
                            dtMargeValue.Rows[nCount]["BussPin"] = strBussPin;
                            nCount++;

                            strVeriType = string.Empty;
                            strName = string.Empty;
                            strPriority = string.Empty;
                            strDept = string.Empty;
                            strDoc = string.Empty;
                            strDate = string.Empty;
                            strAnyInfo = string.Empty;
                            strAgency = string.Empty;
                            strSrNo = string.Empty;
                            strEXEC = string.Empty;

                            strBussAdd = string.Empty;
                            strBussCity = string.Empty;
                            strBussPH = string.Empty;
                            strBussExt = string.Empty;
                            strBussLndMrk = string.Empty;
                            strBussPin = string.Empty;


                            strResiAdd = string.Empty;
                            strResiCity = string.Empty;
                            strResiPH = string.Empty;
                            strResiExt = string.Empty;
                            strResiLndMrk = string.Empty;
                            strResiPin = string.Empty;
                        }


                        strName = dvExcel[i]["Name"].ToString();
                        strPriority = dvExcel[i]["Priority"].ToString();
                        strDept = dvExcel[i]["Dept"].ToString();
                        strDoc = dvExcel[i]["Doc"].ToString();
                        strDate = dvExcel[i]["Date"].ToString();
                        strAnyInfo = dvExcel[i]["Any Info"].ToString();
                        strAgency = dvExcel[i]["Agency"].ToString();
                        strSrNo = dvExcel[i]["SNo."].ToString();
                        strEXEC = dvExcel[i]["EXEC"].ToString();

                        if (strNewRefNo == strRefNo)
                        {
                            strVeriType = strVeriType + "+" + dvExcel[i]["VType"].ToString();
                        }
                        else
                        {
                            strVeriType = dvExcel[i]["VType"].ToString();
                        }

                        if (dvExcel[i]["VType"].ToString() == "BVR")
                        {
                            strBussAdd = dvExcel[i]["Address1"].ToString();
                            strBussCity = dvExcel[i]["City"].ToString();
                            strBussLndMrk = dvExcel[i]["LndMrk"].ToString();
                            strBussPin = dvExcel[i]["PIN"].ToString();
                        }
                        if (dvExcel[i]["VType"].ToString() == "RVR")
                        {
                            strResiAdd = dvExcel[i]["Address"].ToString();
                            strResiCity = dvExcel[i]["City"].ToString();
                            strResiLndMrk = dvExcel[i]["LndMrk"].ToString();
                            strResiPin = dvExcel[i]["PIN"].ToString();
                        }
                        if (dvExcel[i]["VType"].ToString() == "RTVR")
                        {
                            strResiPH = dvExcel[i]["Ph"].ToString();
                            strResiExt = dvExcel[i]["Extn"].ToString();
                        }
                        if (dvExcel[i]["VType"].ToString() == "BTVR")
                        {
                            strBussPH = dvExcel[i]["Ph"].ToString();
                            strBussExt = dvExcel[i]["Extn"].ToString();
                        }
                        strRefNo = strNewRefNo;
                        strFirstTime = "Y";
                    }
                }
            }
        }
        return dtMargeValue;
     }
 }

